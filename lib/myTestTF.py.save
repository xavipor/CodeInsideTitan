import math
import numpy as np
import h5py
import cPickle
import matplotlib.pyplot as plt
import tensorflow as tf
import pdb



W_L0 =
W_L0 = W_L0.transpose(1,3,4,2,0)
b_L0 = b0.get_value()#[64] 

W_L1 = (1-0.3)*W1.get_value()#([64,  3, 64,  3,  3])
W_L1 = W_L1.transpose(1,3,4,2,0)
b_L1 = b1.get_value()#[64]

W_L2 = (1-0.3)*W2.get_value()#([64,  1, 64,  3,  3])
W_L2 = W_L2.transpose(1,3,4,2,0)
b_L2 = b2.get_value()#[64]

W_L3 =(1-0.3)*W3.get_value()
W_L3 = W_L3.transpose(1,3,4,2,0)
b_L3 =b3.get_value()

W_L4 =(1-0.3)*W4.get_value()
W_L4 = W_L4.transpose(1,3,4,2,0)
b_L4 = b4.get_value()


f_param.close()
whole_volume_path = '/home/jdominguezmartinez/pruebas/Microbleeds/cmb-3dcnn-code-v1.0/demo/code/patches/'
data_path = whole_volume_path + str(74) + '.mat'
data_set = np.transpose(np.array(h5py.File(data_path)['patchFlatten']))
image =  data_set.reshape((data_set.shape[0],10,16,16,1))

def forward_propagation(X, W_L0,b_L0,W_L1,b_L1,W_L2,b_L2,W_L3,b_L3,W_L4,b_L4):
    with tf.device('/gpu:0'):

    
    # Retrieve the parameters from the dictionary "parameters" 

    
    ### START CODE HERE ###
    # CONV2D: stride of 1, padding 'SAME
        Z1 =tf.nn.conv3d(X,W_L0,strides=[1,1,1,1],padding='VALID') 
        Z1 = tf.nn.bias_add(Z1,b_L0)
        Z1= tf.nn.max_pool3d(Z1,ksize=(1,2,2,2,1),strides=(1,1,1,1,1),padding='VALID')
        A1 = tf.nn.relu(Z1)
        # MAXPOOL: window 8x8, sride 8, padding 'SAME'
        Z2 =tf.nn.conv3d(A1,W_L1,strides=[1,1,1,1],padding='VALID') 
        Z2 = tf.nn.bias_add(Z2,b_L1)
        A2 = tf.nn.relu(Z2)
        # CONV2D: filters W2, stride 1, padding 'SAME'
        Z3 =tf.nn.conv3d(A2,W_L2,strides=[1,1,1,1],padding='VALID') 
        Z3 = tf.nn.bias_add(Z3,b_L2)
        A3 = tf.nn.relu(Z3)
        # RELU
        Z4 =tf.nn.conv3d(A3,W_L3,strides=[1,1,1,1],padding='VALID') 
        Z4 = tf.nn.bias_add(Z4,b_L3)
        A4 = tf.nn.relu(Z4)

        Z5=tf.nn.conv3d(A4,W_L4,strides=[1,1,1,1],padding='VALID') 
        Z5 = tf.nn.bias_add(Z5,b_L4)


        return Z5


X = tf.placeholder(tf.float32,[1,10,1,16,16],name="X")
with tf.Session() as sess:
    Z5 = forward_propagation(X, W_L0,b_L0,W_L1,b_L1,W_L2,b_L2,W_L3,b_L3,W_L4,b_L4)
    init = tf.global_variables_initializer()
    sess.run(init)
    value = sess.run(Z3,{X:image})
